// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/25/2019 17:45:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          bcd_4d_cnt
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bcd_4d_cnt_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] d;
reg en;
reg load;
reg reset_n;
// wires                                               
wire [15:0] bcd;

// assign statements (if any)                          
bcd_4d_cnt i1 (
// port map - connection between master ports and signals/registers   
	.bcd(bcd),
	.clk(clk),
	.d(d),
	.en(en),
	.load(load),
	.reset_n(reset_n)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// d[ 15 ]
initial
begin
	d[15] = 1'b0;
end 
// d[ 14 ]
initial
begin
	d[14] = 1'b0;
end 
// d[ 13 ]
initial
begin
	d[13] = 1'b0;
end 
// d[ 12 ]
initial
begin
	d[12] = 1'b0;
end 
// d[ 11 ]
initial
begin
	d[11] = 1'b0;
end 
// d[ 10 ]
initial
begin
	d[10] = 1'b0;
end 
// d[ 9 ]
initial
begin
	d[9] = 1'b0;
end 
// d[ 8 ]
initial
begin
	d[8] = 1'b0;
end 
// d[ 7 ]
initial
begin
	d[7] = 1'b0;
end 
// d[ 6 ]
initial
begin
	d[6] = 1'b0;
end 
// d[ 5 ]
initial
begin
	d[5] = 1'b0;
end 
// d[ 4 ]
initial
begin
	d[4] = 1'b0;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b0;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b0;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b0;
end 

// en
initial
begin
	en = 1'b1;
end 

// load
initial
begin
	load = 1'b0;
	load = #50000 1'b1;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
end 
endmodule

